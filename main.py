"""
Vibe Checker - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI API –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—á–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

Usage:
    python main.py
"""

import asyncio
import io
import contextlib
from typing import List, Optional
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from config import TELEGRAM_BOT_TOKEN, logger, ALLOWED_USERS, LOCAL_TZ
from openai_module import get_vibe_checker_response
from storage import storage
from prompts import WELCOME_MESSAGE, HELP_MESSAGE
from audio_handler import transcribe_voice
from datetime import datetime, timedelta
import re
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()


class AccessFilter(BaseFilter):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ALLOWED_USERS.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """

    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id if message.from_user else None
        if user_id is None or user_id not in ALLOWED_USERS:
            try:
                await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ: {e}")
            logger.warning(
                f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
            )
            return False
        return True


dp.message.filter(AccessFilter())


def split_text_for_telegram(text: str, limit: int = 4096) -> List[str]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ <= limit, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ –∞–±–∑–∞—Ü–∞–º, —Å—Ç—Ä–æ–∫–∞–º –∏ —Å–ª–æ–≤–∞–º.
    """
    if len(text) <= limit:
        return [text]

    chunks: List[str] = []
    current: str = ""

    paragraphs = text.split("\n\n")
    for paragraph in paragraphs:
        paragraph = paragraph.strip()
        if not paragraph:
            if current and len(current) + 2 <= limit:
                current += "\n\n"
            elif current:
                chunks.append(current)
                current = ""
            continue

        if not current and len(paragraph) <= limit:
            current = paragraph
            continue

        if len(current) + 2 + len(paragraph) <= limit:
            current = f"{current}\n\n{paragraph}" if current else paragraph
            continue

        # –ü–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç ‚Äî —Ä–µ–∂–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º/—Å–ª–æ–≤–∞–º
        lines = paragraph.split("\n")
        for line in lines:
            line = line.rstrip()
            if not current:
                if len(line) <= limit:
                    current = line
                else:
                    # –†–µ–∂–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Å–ª–æ–≤–∞–º, –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Äî –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                    part = ""
                    for word in line.split(" "):
                        candidate = (part + " " + word).strip() if part else word
                        if len(candidate) <= limit:
                            part = candidate
                        else:
                            if part:
                                chunks.append(part)
                            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–∞–º–æ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞ ‚Äî —Ä–µ–∂–µ–º –∂–µ—Å—Ç–∫–æ
                            while len(word) > limit:
                                chunks.append(word[:limit])
                                word = word[limit:]
                            part = word
                    if part:
                        current = part
                continue

            # –ï—Å—Ç—å —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä
            if len(current) + 1 + len(line) <= limit:
                current += ("\n" + line)
            else:
                chunks.append(current)
                current = ""
                if len(line) <= limit:
                    current = line
                else:
                    part = ""
                    for word in line.split(" "):
                        candidate = (part + " " + word).strip() if part else word
                        if len(candidate) <= limit:
                            part = candidate
                        else:
                            if part:
                                chunks.append(part)
                            while len(word) > limit:
                                chunks.append(word[:limit])
                                word = word[limit:]
                            part = word
                    if part:
                        current = part

    if current:
        chunks.append(current)
    return chunks


async def send_markdown_safe(chat_id: int, text: str) -> None:
    """
    –ù–∞–¥–µ–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –∏/–∏–ª–∏ Markdown-–æ—Ç–≤–µ—Ç–æ–≤:
    1) –†–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ <= 4096
    2) –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å parse_mode="Markdown"
    3) –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∫–∞–∫ plain text
    """
    for chunk in split_text_for_telegram(text):
        try:
            await bot.send_message(chat_id, chunk, parse_mode="Markdown")
        except TelegramBadRequest as e:
            if "can't parse entities" in str(e).lower() or "bad request" in str(e).lower():
                await bot.send_message(chat_id, chunk)
            else:
                raise


async def setup_bot_commands(bot: Bot) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤ –º–µ–Ω—é Telegram.
    """
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="remind", description="‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="reminders", description="üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        BotCommand(command="delremind", description="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="snooze", description="üò¥ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="help", description="üÜò –ü–æ–º–æ—â—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"),
        BotCommand(command="clear", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
    ]
    await bot.set_my_commands(commands)


# ========= –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (inline) =========
WIZARD_TIMEOUT_SEC = 600
wizard_states: dict[int, dict] = {}


def _wizard_init(user_id: int) -> dict:
    st = {
        "updated_at": time.time(),
        "type": None,
        "date_once": None,
        "time_hhmm": None,
        "weekdays": [],
        "weekday_only": False,
        "weekend_only": False,
        "period_minutes": None,
        "window_start": None,
        "window_end": None,
        "text": None,
        "awaiting": None,
    }
    wizard_states[user_id] = st
    return st


def _wizard_get(user_id: int) -> Optional[dict]:
    st = wizard_states.get(user_id)
    if not st:
        return None
    if time.time() - st.get("updated_at", 0) > WIZARD_TIMEOUT_SEC:
        wizard_states.pop(user_id, None)
        return None
    return st


def _wizard_touch(st: dict) -> None:
    st["updated_at"] = time.time()


def _kb_remind_type() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="r:type:daily"), InlineKeyboardButton(text="–†–∞–∑–æ–≤–æ (–¥–∞—Ç–∞)", callback_data="r:type:once")],
        [InlineKeyboardButton(text="–ë—É–¥–Ω–∏", callback_data="r:type:wk"), InlineKeyboardButton(text="–í—ã—Ö–æ–¥–Ω—ã–µ", callback_data="r:type:we")],
        [InlineKeyboardButton(text="–î–Ω–∏ –Ω–µ–¥–µ–ª–∏", callback_data="r:type:days")],
        [InlineKeyboardButton(text="–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏", callback_data="r:type:periodic")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_hours() -> InlineKeyboardMarkup:
    hours = [f"{h:02d}" for h in range(6, 24)]
    rows = []
    row = []
    for i, h in enumerate(hours, 1):
        row.append(InlineKeyboardButton(text=h, callback_data=f"r:timeh:{h}"))
        if i % 6 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="r:back:type")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_minutes() -> InlineKeyboardMarkup:
    mins = ["00", "15", "30", "45"]
    rows = [[InlineKeyboardButton(text=m, callback_data=f"r:timem:{m}") for m in mins]]
    rows.append([
        InlineKeyboardButton(text="+15", callback_data="r:timem:+15"),
        InlineKeyboardButton(text="+30", callback_data="r:timem:+30"),
    ])
    rows.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="r:back:hours")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_date_once() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="r:date:today"), InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="r:date:tomorrow")],
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É (YYYY-MM-DD)", callback_data="r:date:ask")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="r:back:type")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_days_toggle(st_days: list[int]) -> InlineKeyboardMarkup:
    names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    rows = []
    row = []
    for idx, name in enumerate(names):
        mark = "‚úì" if idx in st_days else ""
        row.append(InlineKeyboardButton(text=f"{name}{mark}", callback_data=f"r:day:{idx}"))
        if (idx + 1) % 4 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="r:days:next")])
    rows.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="r:back:type")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_period_presets() -> InlineKeyboardMarkup:
    presets = [30, 45, 60, 90, 120]
    rows = []
    row = []
    for i, p in enumerate(presets, 1):
        row.append(InlineKeyboardButton(text=f"{p} –º–∏–Ω", callback_data=f"r:per:{p}"))
        if i % 3 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="–°–≤–æ–∏ –º–∏–Ω—É—Ç—ã", callback_data="r:per:cust")])
    rows.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="r:back:type")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_window_presets() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="09:00‚Äì21:00", callback_data="r:win:09:00-21:00"), InlineKeyboardButton(text="08:00‚Äì22:00", callback_data="r:win:08:00-22:00")],
        [InlineKeyboardButton(text="24/7", callback_data="r:win:24:7"), InlineKeyboardButton(text="–°–≤–æ—ë –æ–∫–Ω–æ", callback_data="r:win:cust")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="r:win:none")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="r:back:per")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_text_presets() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="–í–æ–¥–∞", callback_data="r:text:water"), InlineKeyboardButton(text="–û–±–µ–¥", callback_data="r:text:lunch")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–∫—É—Å", callback_data="r:text:snack"), InlineKeyboardButton(text="–°–æ–Ω", callback_data="r:text:sleep")],
        [InlineKeyboardButton(text="–°–≤–æ–π —Ç–µ–∫—Å—Ç", callback_data="r:text:custom")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="r:back:time")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _kb_confirm() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å", callback_data="r:confirm:create")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="r:back:text")]]
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def start_remind_wizard(message: Message) -> None:
    user_id = message.from_user.id
    _wizard_init(user_id)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=_kb_remind_type())


def is_user_allowed(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    return user_id in ALLOWED_USERS


@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
    await storage.clear_history(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n{WELCOME_MESSAGE}"
    
    await send_markdown_safe(message.chat.id, welcome_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    await storage.add_message(user_id, "assistant", welcome_text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await storage.set_chat_id(user_id, message.chat.id)


@dp.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await send_markdown_safe(message.chat.id, HELP_MESSAGE)
    await storage.add_message(message.from_user.id, "assistant", HELP_MESSAGE)
    await storage.set_chat_id(message.from_user.id, message.chat.id)


@dp.message(Command("clear"))
async def cmd_clear(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear.
    –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    await storage.clear_history(user_id)
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!")
    await storage.set_chat_id(user_id, message.chat.id)


@dp.message(Command("remind"))
async def cmd_remind(message: Message) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - /remind HH:MM —Ç–µ–∫—Å—Ç ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    - /remind YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞ –¥–∞—Ç—É
    - /remind –±—É–¥–Ω–∏ HH:MM —Ç–µ–∫—Å—Ç ‚Äî –ø–æ –±—É–¥–Ω—è–º (–ø–Ω-–ø—Ç)
    - /remind –≤—ã—Ö–æ–¥–Ω—ã–µ HH:MM —Ç–µ–∫—Å—Ç ‚Äî –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º (—Å–±-–≤—Å)
    - /remind –ø–Ω,—Å—Ä,–ø—Ç HH:MM —Ç–µ–∫—Å—Ç ‚Äî –ø–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º –¥–Ω—è–º (–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å)
    - /remind –∫–∞–∂–¥—ã–µ N–º–∏–Ω HH:MM-HH:MM —Ç–µ–∫—Å—Ç
    """
    user_id = message.from_user.id
    await storage.set_chat_id(user_id, message.chat.id)

    text_cmd = message.text.strip()
    try:
        # –£–±–∏—Ä–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
        body = text_cmd.split(maxsplit=1)[1]
    except Exception:
        await start_remind_wizard(message)
        return

    # –ù–∞–±–æ—Ä—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_map = {
        "–ø–Ω": 0, "–≤—Ç": 1, "—Å—Ä": 2, "—á—Ç": 3, "–ø—Ç": 4, "—Å–±": 5, "–≤—Å": 6,
    }

    date_once = None
    weekdays = None
    weekday_only = False
    weekend_only = False
    period_minutes = None
    window_start = None
    window_end = None

    # –ü–æ–ø—ã—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
    # 1) –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ: YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç
    m = re.match(r"^(\d{4}-\d{2}-\d{2})\s+(\d{2}:\d{2})\s+(.+)$", body)
    if m:
        date_once, time_str, text = m.group(1), m.group(2), m.group(3)
    else:
        # 2) –±—É–¥–Ω–∏/–≤—ã—Ö–æ–¥–Ω—ã–µ: (–±—É–¥–Ω–∏|–≤—ã—Ö–æ–¥–Ω—ã–µ) HH:MM —Ç–µ–∫—Å—Ç
        m2 = re.match(r"^(–±—É–¥–Ω–∏|–≤—ã—Ö–æ–¥–Ω—ã–µ)\s+(\d{2}:\d{2})\s+(.+)$", body, re.IGNORECASE)
        if m2:
            kind, time_str, text = m2.group(1).lower(), m2.group(2), m2.group(3)
            if kind == "–±—É–¥–Ω–∏":
                weekday_only = True
            else:
                weekend_only = True
        else:
            # 3) —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π: –ø–Ω,—Å—Ä,–ø—Ç HH:MM —Ç–µ–∫—Å—Ç
            m3 = re.match(r"^([–∞-—è—ë,\s]+)\s+(\d{2}:\d{2})\s+(.+)$", body, re.IGNORECASE)
            parsed_days = None
            if m3:
                days_part = m3.group(1)
                time_str = m3.group(2)
                text = m3.group(3)
                try:
                    parsed_days = [
                        days_map[d.strip().lower()]
                        for d in days_part.split(',') if d.strip().lower() in days_map
                    ]
                except Exception:
                    parsed_days = None
                if parsed_days:
                    weekdays = parsed_days
                else:
                    # –µ—Å–ª–∏ –ø–∞—Ä—Å –Ω–µ —É–¥–∞–ª—Å—è, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    time_str = None
            else:
                time_str = None

            # 3.5) –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ: –∫–∞–∂–¥—ã–µ <N>–º–∏–Ω [HH:MM-HH:MM] —Ç–µ–∫—Å—Ç
            if time_str is None:
                mper = re.match(r"^–∫–∞–∂–¥—ã–µ\s+(\d+)\s*–º–∏–Ω(?:\s+(\d{2}:\d{2})-(\d{2}:\d{2}))?\s+(.+)$", body, re.IGNORECASE)
                if mper:
                    period_minutes = int(mper.group(1))
                    window_start = mper.group(2)
                    window_end = mper.group(3)
                    text = mper.group(4)
                    # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ–º time_str, –ø–æ—Å—Ç–∞–≤–∏–º –Ω–∞—á–∞–ª–æ –æ–∫–Ω–∞ –ª–∏–±–æ 00:00
                    time_str = window_start if window_start else "00:00"

            if time_str is None:
                # 4) –±–∞–∑–æ–≤—ã–π: HH:MM —Ç–µ–∫—Å—Ç
                m4 = re.match(r"^(\d{2}:\d{2})\s+(.+)$", body)
                if not m4:
                    await message.answer(
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã:\n"
                        "- /remind 13:00 –æ–±–µ–¥\n"
                        "- /remind 2025-08-13 09:30 –≤–∞–∂–Ω—ã–π —Å–æ–∑–≤–æ–Ω\n"
                        "- /remind –±—É–¥–Ω–∏ 08:00 –ø—Ä–æ–±–µ–∂–∫–∞\n"
                        "- /remind –≤—ã—Ö–æ–¥–Ω—ã–µ 10:30 —Å–æ–∑–≤–æ–Ω —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏\n"
                        "- /remind –ø–Ω,—Å—Ä,–ø—Ç 19:00 —Å–ø–æ—Ä—Ç–∑–∞–ª\n"
                        "- /remind –∫–∞–∂–¥—ã–µ 60–º–∏–Ω 09:00-21:00 –≤–æ–¥–∞"
                    )
                    return
                time_str, text = m4.group(1), m4.group(2)

    try:
        reminder = await storage.add_reminder(
            user_id,
            time_str,
            text.strip(),
            date_once=date_once,
            weekdays=weekdays,
            weekday_only=weekday_only,
            weekend_only=weekend_only,
            period_minutes=period_minutes,
            window_start_hhmm=window_start,
            window_end_hhmm=window_end,
        )
        await message.answer(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {reminder['time']} ‚Äî {reminder['text']}"
        )
    except ValueError as e:
        await message.answer(str(e))


@dp.message(Command("reminders"))
async def cmd_reminders(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    await storage.set_chat_id(user_id, message.chat.id)
    reminders = await storage.list_reminders(user_id)
    if not reminders:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"
            "–ü—Ä–∏–º–µ—Ä: /remind 13:00 –æ–±–µ–¥\n"
            "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ: /remind 08:30 –∑–∞—Ä—è–¥–∫–∞"
        )
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    lines = []
    keyboard_rows = []
    for r in reminders:
        extra_parts = []
        if r.get('date_once'):
            extra_parts.append(f"–¥–∞—Ç–∞: {r['date_once']}")
        if r.get('weekday_only'):
            extra_parts.append("–±—É–¥–Ω–∏")
        if r.get('weekend_only'):
            extra_parts.append("–≤—ã—Ö–æ–¥–Ω—ã–µ")
        if r.get('weekdays'):
            # —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "0,2,4" -> –ø–Ω,—Å—Ä,–ø—Ç
            idx_to_ru = {0:"–ø–Ω",1:"–≤—Ç",2:"—Å—Ä",3:"—á—Ç",4:"–ø—Ç",5:"—Å–±",6:"–≤—Å"}
            try:
                items = [idx_to_ru.get(int(x), str(x)) for x in r['weekdays'].split(',') if x]
                if items:
                    extra_parts.append("–¥–Ω–∏: " + ",".join(items))
            except Exception:
                pass
        if r.get('snooze_until'):
            extra_parts.append(f"–æ—Ç–ª–æ–∂–µ–Ω–æ –¥–æ {r['snooze_until']}")
        extras = f" ({'; '.join(extra_parts)})" if extra_parts else ""
        lines.append(f"{r['time']} ‚Äî {r['text']}{extras}")
        keyboard_rows.append([
            InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {r['time']} ‚Äî {r['text']}", callback_data=f"delremind:{r['id']}")
        ])

    kb = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.answer("–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(lines), reply_markup=kb)


@dp.message(Command("delremind"))
async def cmd_delremind(message: Message) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID: /delremind ID
    """
    user_id = message.from_user.id
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        reminders = await storage.list_reminders(user_id)
        if not reminders:
            await message.answer("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ: /remind 13:00 –æ–±–µ–¥")
            return
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {r['time']} ‚Äî {r['text']}", callback_data=f"delremind:{r['id']}")]
            for r in reminders
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        return
    try:
        identifier = int(parts[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    ok = await storage.delete_reminder(user_id, identifier)
    if ok:
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    else:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID")


@dp.callback_query(F.data.startswith("delremind:"))
async def cb_delremind(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    user_id = callback.from_user.id if callback.from_user else None
    if user_id is None or user_id not in ALLOWED_USERS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        identifier_str = callback.data.split(":", 1)[1]
        identifier = int(identifier_str)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
        return

    ok = await storage.delete_reminder(user_id, identifier)
    if ok:
        await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        await callback.message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    else:
        await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)


@dp.callback_query(F.data.startswith("snooze:"))
async def cb_snooze(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ N –º–∏–Ω—É—Ç" –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
    –§–æ—Ä–º–∞—Ç callback_data: snooze:<id>:<minutes>
    """
    user_id = callback.from_user.id if callback.from_user else None
    if user_id is None or user_id not in ALLOWED_USERS:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        _, rid_str, minutes_str = callback.data.split(":", 2)
        rid = int(rid_str)
        minutes = int(minutes_str)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", show_alert=True)
        return

    now_local = datetime.now(LOCAL_TZ)
    snooze_until = now_local + timedelta(minutes=minutes)
    snooze_iso = snooze_until.strftime("%Y-%m-%d %H:%M")
    await storage.set_reminder_snooze(user_id, rid, snooze_iso)
    await callback.answer(f"–û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω")
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass


# ====== –ö–æ–ª–ª–±—ç–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ======

@dp.callback_query(F.data.startswith("r:type:"))
async def cb_r_type(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    typ = callback.data.split(":", 2)[2]
    st["type"] = typ
    if typ == "daily":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —á–∞—Å:", reply_markup=_kb_hours())
    elif typ == "once":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=_kb_date_once())
    elif typ in ("wk", "we"):
        st["weekday_only"] = (typ == "wk")
        st["weekend_only"] = (typ == "we")
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —á–∞—Å:", reply_markup=_kb_hours())
    elif typ == "days":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:", reply_markup=_kb_days_toggle(st["weekdays"]))
    elif typ == "periodic":
        await callback.message.edit_text("–ü–µ—Ä–∏–æ–¥ (–º–∏–Ω—É—Ç—ã):", reply_markup=_kb_period_presets())
    await callback.answer()


@dp.callback_query(F.data.startswith("r:timeh:"))
async def cb_r_time_hour(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    hour = callback.data.split(":", 2)[2]
    st["time_hhmm"] = f"{hour}:00"
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –º–∏–Ω—É—Ç—ã:", reply_markup=_kb_minutes())
    await callback.answer()


@dp.callback_query(F.data.startswith("r:timem:"))
async def cb_r_time_min(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    val = callback.data.split(":", 2)[2]
    hh, mm = (st.get("time_hhmm") or "00:00").split(":")
    if val.startswith("+"):
        inc = 15 if "+15" in val else 30
        total = int(hh) * 60 + int(mm) + inc
        nh = (total // 60) % 24
        nm = total % 60
        st["time_hhmm"] = f"{nh:02d}:{nm:02d}"
    else:
        st["time_hhmm"] = f"{hh}:{val}"
    await callback.message.edit_text(f"–í—Ä–µ–º—è: {st['time_hhmm']}\n–í—ã–±–µ—Ä–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–µ—Å–µ—Ç:", reply_markup=_kb_text_presets())
    await callback.answer()


@dp.callback_query(F.data.startswith("r:date:"))
async def cb_r_date(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    what = callback.data.split(":", 2)[2]
    now = datetime.now(LOCAL_TZ)
    if what == "today":
        st["date_once"] = now.strftime("%Y-%m-%d")
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —á–∞—Å:", reply_markup=_kb_hours())
    elif what == "tomorrow":
        st["date_once"] = (now + timedelta(days=1)).strftime("%Y-%m-%d")
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —á–∞—Å:", reply_markup=_kb_hours())
    elif what == "ask":
        st["awaiting"] = "date_once"
        await callback.message.edit_text("–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD")
    await callback.answer()


@dp.callback_query(F.data.startswith("r:day:"))
async def cb_r_day_toggle(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    idx = int(callback.data.split(":", 2)[2])
    days = set(st.get("weekdays") or [])
    if idx in days:
        days.remove(idx)
    else:
        days.add(idx)
    st["weekdays"] = sorted(days)
    try:
        await callback.message.edit_reply_markup(reply_markup=_kb_days_toggle(st["weekdays"]))
    except Exception:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:", reply_markup=_kb_days_toggle(st["weekdays"]))
    await callback.answer()


@dp.callback_query(F.data == "r:days:next")
async def cb_r_days_next(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —á–∞—Å:", reply_markup=_kb_hours())
    await callback.answer()


@dp.callback_query(F.data.startswith("r:per:"))
async def cb_r_period(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    what = callback.data.split(":", 2)[2]
    if what == "cust":
        st["awaiting"] = "period"
        await callback.message.edit_text("–í–≤–µ–¥–∏ –ø–µ—Ä–∏–æ–¥ –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 60")
    else:
        st["period_minutes"] = int(what)
        await callback.message.edit_text("–û–∫–Ω–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", reply_markup=_kb_window_presets())
    await callback.answer()


@dp.callback_query(F.data.startswith("r:win:"))
async def cb_r_window(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    data = callback.data.split(":", 2)[2]
    if data == "none":
        st["window_start"], st["window_end"] = None, None
    elif data == "cust":
        st["awaiting"] = "window"
        await callback.message.edit_text("–í–≤–µ–¥–∏ –æ–∫–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM-HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:00-21:00")
        await callback.answer()
        return
    elif data == "24:7":
        st["window_start"], st["window_end"] = None, None
    else:
        try:
            ws, we = data.split("-")
            st["window_start"], st["window_end"] = ws, we
        except Exception:
            st["window_start"], st["window_end"] = None, None
    await callback.message.edit_text("–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=_kb_text_presets())
    await callback.answer()


@dp.callback_query(F.data.startswith("r:text:"))
async def cb_r_text(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id) or _wizard_init(user_id)
    _wizard_touch(st)
    what = callback.data.split(":", 2)[2]
    presets = {"water": "–≤–æ–¥–∞", "lunch": "–æ–±–µ–¥", "snack": "–ø–µ—Ä–µ–∫—É—Å", "sleep": "—Å–æ–Ω"}
    if what == "custom":
        st["awaiting"] = "text"
        await callback.message.edit_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
    else:
        st["text"] = presets.get(what, what)
        await callback.message.edit_text(_wizard_summary(st), reply_markup=_kb_confirm())
    await callback.answer()


def _wizard_summary(st: dict) -> str:
    parts = ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:"]
    t = st.get("type")
    if t == "periodic":
        per = st.get("period_minutes")
        win = (st.get("window_start"), st.get("window_end"))
        parts.append(f"- –¢–∏–ø: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ {per} –º–∏–Ω")
        if any(win):
            parts.append(f"- –û–∫–Ω–æ: {win[0] or '00:00'}-{win[1] or '24:00'}")
    else:
        parts.append(f"- –í—Ä–µ–º—è: {st.get('time_hhmm')}")
    if t == "once":
        parts.append(f"- –î–∞—Ç–∞: {st.get('date_once')}")
    if t == "wk":
        parts.append("- –î–Ω–∏: –±—É–¥–Ω–∏")
    if t == "we":
        parts.append("- –î–Ω–∏: –≤—ã—Ö–æ–¥–Ω—ã–µ")
    if t == "days" and st.get("weekdays"):
        idx_to_ru = {0:"–ø–Ω",1:"–≤—Ç",2:"—Å—Ä",3:"—á—Ç",4:"–ø—Ç",5:"—Å–±",6:"–≤—Å"}
        parts.append("- –î–Ω–∏: " + ",".join(idx_to_ru[i] for i in st["weekdays"]))
    parts.append(f"- –¢–µ–∫—Å—Ç: {st.get('text')}")
    return "\n".join(parts)


@dp.callback_query(F.data == "r:back:type")
async def cb_r_back_type(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=_kb_remind_type())
    await callback.answer()


@dp.callback_query(F.data == "r:back:hours")
async def cb_r_back_hours(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —á–∞—Å:", reply_markup=_kb_hours())
    await callback.answer()


@dp.callback_query(F.data == "r:back:time")
async def cb_r_back_time(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –º–∏–Ω—É—Ç—ã:", reply_markup=_kb_minutes())
    await callback.answer()


@dp.callback_query(F.data == "r:back:per")
async def cb_r_back_per(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–ü–µ—Ä–∏–æ–¥ (–º–∏–Ω—É—Ç—ã):", reply_markup=_kb_period_presets())
    await callback.answer()


@dp.callback_query(F.data == "r:back:text")
async def cb_r_back_text(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=_kb_text_presets())
    await callback.answer()


@dp.callback_query(F.data == "r:confirm:create")
async def cb_r_confirm_create(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    st = _wizard_get(user_id)
    if not st:
        await callback.answer("–ú–∞—Å—Ç–µ—Ä —É—Å—Ç–∞—Ä–µ–ª, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /remind", show_alert=True)
        return
    _wizard_touch(st)
    typ = st.get("type")
    time_hhmm = st.get("time_hhmm") or "00:00"
    text = st.get("text") or "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    date_once = st.get("date_once")
    weekdays = st.get("weekdays") or None
    weekday_only = bool(st.get("weekday_only"))
    weekend_only = bool(st.get("weekend_only"))
    period_minutes = st.get("period_minutes")
    window_start = st.get("window_start")
    window_end = st.get("window_end")

    try:
        reminder = await storage.add_reminder(
            user_id,
            time_hhmm,
            text.strip(),
            date_once=date_once,
            weekdays=weekdays,
            weekday_only=weekday_only,
            weekend_only=weekend_only,
            period_minutes=period_minutes,
            window_start_hhmm=window_start,
            window_end_hhmm=window_end,
        )
        wizard_states.pop(user_id, None)
        await callback.message.edit_text(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {reminder['time']} ‚Äî {reminder['text']}"
        )
    except Exception as e:
        await callback.answer(str(e), show_alert=True)


@dp.message(Command("snooze"))
async def cmd_snooze(message: Message) -> None:
    """
    –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: /snooze ID [–º–∏–Ω—É—Ç—ã], –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç
    """
    user_id = message.from_user.id
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /snooze ID [–º–∏–Ω—É—Ç—ã]. –ü—Ä–∏–º–µ—Ä: /snooze 5 10")
        return
    try:
        rid = int(parts[1])
        minutes = int(parts[2]) if len(parts) >= 3 else 10
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: /snooze 5 10")
        return
    now_local = datetime.now(LOCAL_TZ)
    snooze_until = now_local + timedelta(minutes=minutes)
    snooze_iso = snooze_until.strftime("%Y-%m-%d %H:%M")
    storage.set_reminder_snooze(user_id, rid, snooze_iso)
    await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ [{rid}] –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç")


@dp.message(F.text)
async def handle_message(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ (–¥–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥/–æ–∫–Ω–æ/—Ç–µ–∫—Å—Ç)
    st = _wizard_get(user_id)
    if st and st.get("awaiting"):
        kind = st["awaiting"]
        st["awaiting"] = None
        _wizard_touch(st)
        if kind == "date_once":
            if re.match(r"^\d{4}-\d{2}-\d{2}$", message.text.strip()):
                st["date_once"] = message.text.strip()
                await message.answer("–í—ã–±–µ—Ä–∏ —á–∞—Å:", reply_markup=_kb_hours())
                return
            else:
                await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                st["awaiting"] = "date_once"
                return
        if kind == "period":
            try:
                st["period_minutes"] = int(message.text.strip())
                await message.answer("–û–∫–Ω–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", reply_markup=_kb_window_presets())
                return
            except Exception:
                await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 60")
                st["awaiting"] = "period"
                return
        if kind == "window":
            m = re.match(r"^(\d{2}:\d{2})-(\d{2}:\d{2})$", message.text.strip())
            if m:
                st["window_start"], st["window_end"] = m.group(1), m.group(2)
                await message.answer("–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=_kb_text_presets())
                return
            else:
                await message.answer("–§–æ—Ä–º–∞—Ç –æ–∫–Ω–∞: HH:MM-HH:MM. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                st["awaiting"] = "window"
                return
        if kind == "text":
            st["text"] = message.text.strip()
            await message.answer(_wizard_summary(st), reply_markup=_kb_confirm())
            return
    user_message = message.text
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    chat_id = message.chat.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await storage.add_message(user_id, "user", user_message)
    await storage.set_chat_id(user_id, chat_id)
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await bot.send_chat_action(chat_id=chat_id, action="typing")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_history = await storage.get_message_history(user_id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Vibe Checker
        response_text = await get_vibe_checker_response(message_history, user_id=user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await send_markdown_safe(chat_id, response_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        await storage.add_message(user_id, "assistant", response_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(F.voice)
async def handle_voice_message(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = message.voice
        file = await bot.get_file(voice.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        voice_io = io.BytesIO()
        await bot.download(file, destination=voice_io)
        voice_io.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        voice_data = voice_io.read()
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
        voice_text = await transcribe_voice(voice_data, f"{voice.file_id}.ogg")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        await message.answer(f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {voice_text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await storage.add_message(user_id, "user", voice_text)
        await storage.set_chat_id(user_id, chat_id)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_history = await storage.get_message_history(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Vibe Checker
        response_text = await get_vibe_checker_response(message_history, user_id=user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_markdown_safe(chat_id, response_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        await storage.add_message(user_id, "assistant", response_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é Telegram
    await setup_bot_commands(bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    async def reminders_loop():
        while True:
            try:
                now_local = datetime.now(LOCAL_TZ)
                hhmm = now_local.strftime("%H:%M")
                today = now_local.strftime("%Y-%m-%d")
                weekday_idx = int(now_local.strftime("%w")) - 1  # 0=–ø–Ω .. 6=–≤—Å
                if weekday_idx < 0:
                    weekday_idx = 6
                now_iso = now_local.strftime("%Y-%m-%d %H:%M")

                due = await storage.get_due_reminders(hhmm, today, weekday_idx, now_iso)
                for user_id_int, reminder, is_snooze in due:
                    chat_id_saved = await storage.get_chat_id(user_id_int)
                    if chat_id_saved:
                        try:
                            # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 10 –º–∏–Ω—É—Ç
                            kb = InlineKeyboardMarkup(
                                inline_keyboard=[
                                    [InlineKeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 10 –º–∏–Ω", callback_data=f"snooze:{reminder['id']}:10")]
                                ]
                            )
                            await bot.send_message(chat_id_saved, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}", reply_markup=kb)
                            if is_snooze:
                                await storage.clear_snooze(user_id_int, int(reminder['id']))
                            else:
                                await storage.mark_reminder_sent(user_id_int, int(reminder['id']), today)
                            # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ ‚Äî –¥–≤–∏–≥–∞–µ–º next_fire_at
                            if reminder.get('periodic') is True:
                                await storage.bump_periodic_next_fire(user_id_int, int(reminder['id']), now_iso)
                        except Exception as send_err:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder}: {send_err}")
                await asyncio.sleep(30)
            except asyncio.CancelledError:
                logger.info("–¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–º–µ–Ω—ë–Ω, –≤—ã—Ö–æ–¥–∏–º...")
                break
            except Exception as loop_err:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {loop_err}")
                await asyncio.sleep(30)

    reminders_task = asyncio.create_task(reminders_loop())

    try:
        # –°—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(bot)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminders_task.cancel()
        with contextlib.suppress(Exception):
            await asyncio.gather(reminders_task)


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}") 